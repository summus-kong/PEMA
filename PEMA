#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
@Date: 2024.03
@Author: Weibo Hou
@Description: PEMA
"""

import logging
import subprocess
import sys
import time
import utils as ut
import parse_args as pa

args = pa.parseArguments()
inrna = args.input_rna
inribo = args.input_ribo
species = args.species
out = args.output
threads = args.threads
choose = args.choose

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                    datefmt='%m/%d/%Y %H:%M:%S',
                    level=logging.INFO)

logging.info("PEMA")
ut.check_files_exist(inrna, inribo)
ut.check_paths_exist(out)

def run():
    # 01
    options = ut.parse_biotools_options(*args, **kw)
    cmd = ['compass', '--data', inrna, '--species', species, '--output-dir', out, '--num-threads', threads]
    cmd.extend(options)
    time_start = time.time()
    logging.info('Start Process')
    try:
        # logging.info(f'Codes: {ut.covert_cmd(cmd)}')
        res = ut.run_biotools(ut.covert_cmd(cmd))
        exitcode = res.returncode
        if exitcode == 0:
            return True
        else:
            logging.info(f"Following error occurred executing above command (return code={exitcode}):")
            print("STDOUT:\n" + res.stdout)
            print("STDERR:\n" + res.stderr)
            return False
    except subprocess.CalledProcessError as e:
        logging.error("CalledProcessError exception occurred.\n" + str(e))
        return False
    except:
        logging.error("Fatal error occurred during execution.\n" + str(sys.exc_info()[0]))
        return False

    # 02
    out1 = out + '/' + 'reactions.tsv'
    if choose == 'a':
        outw = out + '/' + 'weighted_reactions.txt'
        cmdribo = ['Rscript', 'calculate.R', out1, inribo, species, outw]
    elif choose == 'b':
        outw = out + '/' + 'weighted_reactions.txt'
        cmdribo = ['Rscript', 'calculateal.R', out1, inribo, species, outw]
    else: print('Error!')
    try:
        # logging.info(f'Codes: {ut.covert_cmd(cmd)}')
        res = ut.run_biotools(ut.covert_cmd(cmd))
        exitcode = res.returncode
        if exitcode == 0:
            return True
        else:
            logging.info(f"Following error occurred executing above command (return code={exitcode}):")
            print("STDOUT:\n" + res.stdout)
            print("STDERR:\n" + res.stderr)
            return False
    except subprocess.CalledProcessError as e:
        logging.error("CalledProcessError exception occurred.\n" + str(e))
        return False
    except:
        logging.error("Fatal error occurred during execution.\n" + str(sys.exc_info()[0]))
        return False

    end_time = time.time()
    timediff = round(end_time - time_start)
    ut.print_cc(res)
    logging.info("Time taken of commands:" + str(timedelta(seconds=timediff)))

if __name__ == '__main__':
    if not run():
        logging.info('Error occurred')